name: k9 language
scopeName: source.k
patterns:
  # DO NOT change orders
  - include: "#comments"
  - include: "#strings"
  - include: "#constants"
  - include: "#keywords"
  - include: "#function"
  - include: "#invalids"
repository:
  comments:
    patterns:
      - name: comment.block.k
        begin: ^/\s*$
        end: ^\\\s*$
      - name: comment.block.eof.k
        begin: ^\\\s*$
        end: \z
      - begin: (^(//?)(?:\s*)(?:(@\w+)(?:[^.\w]+([.\w]+)(?:[^.\w]+(\w*))?)?)?)
        beginCaptures:
          1: { name: comment.line.slash.k }
          2: { name: punctuation.definition.comment.k }
          3: { name: storage.type.class.k }
          4: { name: variable.parameter.k }
          5: { name: entity.name.type }
        end: (?=^)
        contentName: comment.line.k
      - name: comment.line.inline.k
        match: \s/.*
  strings:
    patterns:
      - begin: '"'
        beginCaptures:
          0: { name: punctuation.definition.string.begin.k }
        end: '"'
        endCaptures:
          0: { name: punctuation.definition.string.end.k }
        name: string.kuoted.double.k
        patterns:
          - name: constant.character.escape.k
            match: \\(\\|n|t|r|")
  invalids:
    patterns:
      - name: invalid.illegal.bracket.k
        match: ^[}\]\)].*
  constants:
    patterns:
      - name: support.function.name.k
        match: '`(js|csv|nv)(?=[\?\s])'
      - name: support.constant.time.k
        match: \.z\.[dt]\b
      - name: support.function.io.k
        match: (?<=\b|_)(0:|1:|2:|3:|4:|5:)
      - name: constant.language.null.k
        match: (?<=\b|_)0[nN]
      - name: constant.language.boolean.k
        match: (?<=\b|_)[01]+b
      - name: constant.language.infinity.k
        match: (?<=\b|_)-?0[wW]
      - name: constant.other.timestamp.datetime.k
        match: (?<=\b|_)([12]\d{3}\.(0[1-9]|1[0-2])\.(0[1-9]|[12]\d|3[01]))(z|T|Tz|T(([01]\d|2[0-3])(:([0-5]\d)(:([0-5]\d(\.\d{0,9})?))?)?z?))(?=\b|_)
      - name: constant.other.date.time.k
        match: (?<=\b|_)(([01]\d|2[0-3]):)(([0-5]\d)(:([0-5]\d(\.\d{0,9})?))?)?
      - name: constant.other.date
        match: (?<=\b|_)([12]\d{3}\.(0[1-9]|1[0-2])\.(0[1-9]|[12]\d|3[01]))
      - name: constant.numeric.guid.k
        match: (?<=\b|_)([\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12})
      - name: constant.numeric.decimal.k
        match: |-
          (?x)((?<=[^a-zA-Z0-9])-)?(?:
            (?:(?<=\b|_)[0-9]+(\.)[0-9]*e-?[0-9]+)|   # 1.1e3
            (?:(?<=\b|_)[0-9]+(\.)e-?[0-9]+)|         # 1.e3
            (?:(?<=\B|_)(\.)[0-9]+e-?[0-9]+)|         # .1e3
            (?:(?<=\b|_)[0-9]+e-?[0-9]+)|             # 1e3
            (?:(?<=\b|_)[0-9]+(\.)[0-9]+)|            # 1.1
            (?:(?<=\B|_)(\.)[0-9]+)|                  # .1
            (?:(?<=\b|_)[0-9]+)                       # 1ghij
          )
      - name: support.type.k
        match: '`[cnifdthrsv](?=[\$\s])'
      - name: constant.other.name.k
        match: '`[a-zA-Z\d\.:]*'
      - name: constant.other.cmd.k
        match: ^\\.+
  keywords:
    patterns:
      - name: keyword.operator.k
        match: (?<=\b|_)(abs|avg|bar|bin|cos|count|deltas|dev|differ|div|dot|exp|first|in|last|log|max|meta|min|mod|sin|sqr|sqrt|sum|var|within)\b
      - name: keyword.control.k
        match: \$(?=\[)
      - name: keyword.assign.k
        match: ":"
      - name: keyword.iterator.k
        match: (':?|\\:?|/:?)
      - name: keyword.other.DML.k
        match: (?<=\b|_)(select|update|delete|from|where|by)\b
      - name: keyword.operator.comparison.k
        match: (=|<|>|~)
      - include: "#variables"
      - name: keyword.operator.k
        match: '[\@\.\$!?+\-\*%|&#^,_]'
  variables:
    patterns:
      # gloabl function/variables
      - name: entity.name.function.k
        match: (?<![a-zA-Z\d])\.[a-zA-Z][a-zA-Z\d]*(\.[a-zA-Z\d]+)*
  function:
    patterns:
      - begin: "{"
        beginCaptures:
          0: { name: punctuation.definition.function.body.begin.k }
        end: "}"
        endCaptures:
          0: { name: punctuation.definition.function.body.end.k }
        patterns:
          - include: "#comments"
          - include: "#strings"
          - include: "#constants"
          - include: "#keywords"
          - include: "#invalids"
          - include: "#function"
          - name: entity.name.variable.parameter.k
            match: (?<=\b|_)(x|y|z)(?=\b|_)
